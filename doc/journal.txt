==========================================================================
ジャーナリングについての説明
--------------------------------------------------------------------------

ジャーナル機能はデフォルトでは無効になっています。
利用する場合は make ファイルで TXT_JOURNAL を定義してコンパイルしてください。


==========================================================================
・ジャーナルとは？
--------------------------------------------------------------------------

・データベースにおけるジャーナルとは、データベースの変更ログを書き込んでおき、
　データベースに障害が発生した場合、正常なバックアップデータと変更ログから
　障害発生直前のデータベースを復元する機能です。
　
・Auriga のジャーナルも基本的には同じですが多少目的が異なります。
　データを txt ファイルに保存する場合、すべてのデータを txt に変換して
　ファイルに書き込むため、非常に時間がかかります。
　そこで書き換えられたデータのみをジャーナルとして保存しておき、
　txt への保存はあまり頻繁には行わないようにして高速化を図ります。


==========================================================================
・ジャーナルの処理内容
--------------------------------------------------------------------------

・txt からデータをロードすると、ジャーナルを新規に作ります。

・データが変更されると、ジャーナルを書き込みキャッシュに格納します。
　・キャッシュに格納する意味があるかはわかりませんが、
　　あるデータが頻繁に変更されるなら格納したほうがよいと思われます。
　・同じデータが書き換えられた場合、古い物は削除して新しいデータを利用します。

・キャッシュ内のジャーナルは高い頻度でファイルにフラッシュされます。
　・どのくらいの頻度がいいかわかりません。フラッシュ間隔が短い場合、
　　同じデータが頻繁に変更されるとディスクアクセスが激しくなりますが、
　　障害発生時の巻き戻りが少なくなります。
　　反面、フラッシュ間隔が長い場合、たくさんのデータが更新されていると
　　フラッシュに時間がかかったり、キャッシュ用に多くのメモリを消費したり、
　　障害発生時の巻き戻りが多くなります。
　　どのくらいが理想的かは実際にサーバーのログイン人数などによって
　　変わると思います。
　・ディスクにフラッシュする場合、同じデータを以前にフラッシュしていた場合
　　違うファイル位置に書き込みます。これは書き込み中の障害発生への対処です。
　　（１つ前のジャーナルデータを利用できるようにする）

・サーバーを終了するとき、または低い間隔で txt ファイルにデータを書き出し、
　ジャーナルデータをすべて削除します。
　・ジャーナルデータは txt データからの差分データなので txt を保存すると
　　差分はなくなるので削除されます。

・txt からデータをロードするとき、ジャーナルが残っていれば
　txt の内容にジャーナルデータをロールフォワードして、txt に書き戻します。
　・サーバー起動時は、速やかに差分データを適用するということです。


==========================================================================
・ジャーナルの仕様と注意
--------------------------------------------------------------------------

・ジャーナルファイルは高速化のためバイナリ形式で保存されています。
　サーバーのパッチが適用されデータの構造が変更されると、
　以前のジャーナルを読み込めなくなります。サーバーにパッチを当てる場合は、
　必ずジャーナルファイルが存在しないことを確認してください。
　存在する場合、一度サーバーを起動してロールフォワードし、
　その後サーバーを停止させ、ジャーナルが削除されたことを確認してください。
　この手順でジャーナルが削除されない場合、サーバーの停止手段を間違っているか、
　終了処理がうまく処理できない環境でコンパイルされていると思われます。

　"journal: file version or datasize mismatch !" と出た場合、
　互換性のないジャーナルファイルが残っています。
　この場合、前の Ver に戻してロールフォワード処理を行うか、
　削除するまでサーバーはエラーで終了するようになります。

・ジャーナルはバイナリイメージをそのまま吐き出すため、
　容量がかなり大きくなることがあります。HDD に十分な空きが必要です。

・ジャーナルファイルの破損検出のため、crc32 によるチェックを行っています。
　md5 などに比べると信頼性が低いですが、計算速度の速さを優先しました。

・ジャーナルを有効にした場合、txt へのセーブ間隔を大きくしないと
　速度への貢献はありません。（信頼性はあがるかもしれません）


==========================================================================
・ジャーナルの設定
--------------------------------------------------------------------------

login_auriga.conf, char_auriga.conf, inter_auriga.conf, map_auriga.conf

	各種の txt のジャーナリングに関する設定があります。

	*_journal_enable
		0 でジャーナル機能を無効にします
	
	*_journal_file
		ジャーナルデータを保存するファイル名を指定します

	*_journal_cache_interval
		ジャーナルのキャッシュをフラッシュする間隔を指定します
		0 に設定するとまったくキャッシュしなくなります

journal.c
	JOURNAL_DEBUG
		定義すると正常終了時にジャーナルを削除せず、別名にして残します
		
	CHUNKUNITSIZE
		ファイルへのアクセスの単位バイト数
		ファイルシステムのクラスタ ( アロケーションユニット ) サイズにすると
		よいと思われます。
		データによってはジャーナルのファイルサイズに大きく影響します。

